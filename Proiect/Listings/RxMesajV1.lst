C51 COMPILER V9.59.0.0   RXMESAJV1                                                         04/03/2023 09:49:11 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE RXMESAJV1
OBJECT MODULE PLACED IN .\Objects\RxMesajV1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE RxMesajV1.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\BIG8051\Include) DEB
                    -UG OBJECTEXTEND PRINT(.\Listings\RxMesajV1.lst) TABS(2) OBJECT(.\Objects\RxMesajV1.obj)

line level    source

   1          #include <c8051F040.h>  // declaratii SFR
   2          #include <uart1.h>
   3          #include <Protocol.h>
   4          #include <UserIO.h>
   5          
   6          extern nod retea[];           // reteaua Master-Slave, cu 5 noduri
   7          
   8          extern unsigned char STARE_NOD;   // starea initiala a nodului curent
   9          extern unsigned char TIP_NOD;     // tip nod
  10          extern unsigned char ADR_MASTER;  // adresa nodului master
  11          
  12          extern unsigned char timeout;   // variabila globala care indica expirare timp de asteptare eveniment
  13          //********************************************************************************************************
             -***
  14          unsigned char RxMesaj(unsigned char i);       // primire mesaj de la nodul i
  15          unsigned char ascii2bin(unsigned char *ptr);      // functie de conversie 2 caractere ASCII HEX in binar
  16          
  17          //********************************************************************************************************
             -***
  18          unsigned char RxMesaj(unsigned char i){         // receptie mesaj                                
  19   1        // unsigned char j, ch, sc, adresa_hw_dest, adresa_hw_src, screc, src, dest, lng, tipmes, *ptr;
  20   1                                    // Daca nodul este master...
  21   1                                    // M: asteapta cu timeout primul caracter al raspunsului de la slave
  22   1                                    // M: timeout, terminare receptie
  23   1                                    // M: raspunsul de la slave vine, considera ca mesajul anterior a fost transmis cu succes 
  24   1      
  25   1                                    
  26   1                                    // M: ignora restul mesajului
  27   1                                      
  28   1                                    // M: adresa HW ASCII gresita, terminare receptie
  29   1                                                                  
  30   1                                    // M: initializare pointer in bufferul ASCII
  31   1                                    
  32   1                                    // M: asteapta cu timeout primul caracter ASCII al adresei HW
  33   1                                    // M: timeout, terminare receptie
  34   1      
  35   1                                    // M: asteapta cu timeout al doilea caracter al adresei HW
  36   1                                    // M: timeout, terminare receptie
  37   1      
  38   1                                    
  39   1                                      
  40   1                                    // M: ignora restul mesajului
  41   1                                    
  42   1                                    // M: adresa HW ASCII gresita, terminare receptie
  43   1                                    
  44   1                                    
  45   1                                    
  46   1                                    // Daca nodul este slave...
  47   1                                    
  48   1                                    // S: asteapta cu timeout primirea primului caracter al unui mesaj de la master
  49   1                                    // S: timeout, terminare receptie
  50   1                                      
  51   1                                    // S: asteapta sincronizarea cu inceputul mesajului
  52   1            
C51 COMPILER V9.59.0.0   RXMESAJV1                                                         04/03/2023 09:49:11 PAGE 2   

  53   1                                    // S: initializeaza pointerul in bufferul ASCII
  54   1                                    // S: asteapta cu timeout primul caracter ASCII al adresei HW
  55   1                                    // S: timeout, terminare receptie
  56   1      
  57   1                                    // S: asteapta cu timeout al doilea caracter al adresei HW
  58   1                                    // S: timeout, terminare receptie
  59   1      
  60   1                                    // S: determina adresa HW destinatie
  61   1                                    
  62   1                                    // S: iese doar cand mesajul era adresat acestui slave
  63   1                                    
  64   1                                    
  65   1                                    
  66   1                                    // M+S: pune in bufasc restul mesajului ASCII HEX
  67   1                                    // M+S: timeout, terminare receptie
  68   1                                    
  69   1                                    
  70   1        
  71   1                                    // M+S: reinitializare pointer in bufferul ASCII
  72   1                                    // M+S: initializeaza screc cu adresa HW dest
  73   1         
  74   1                                    // M+S: determina adresa HW src
  75   1                                    
  76   1                                    // M+S: aduna adresa HW src
  77   1      
  78   1                                    // Slave actualizeaza adresa Master
  79   1        
  80   1                                    // M+S: determina tipul mesajului
  81   1                                      
  82   1                                    // M+S: cod functie eronat, terminare receptie
  83   1                                      // M+S: ia in calcul in screc codul functiei
  84   1      
  85   1                                    // M+S: Daca mesajul este unul de date
  86   1                                    // M+S: determina sursa mesajului
  87   1                                      
  88   1                                    // M+S: ia in calcul in screc adresa src
  89   1          
  90   1                                    // M+S: determina destinatia mesajului
  91   1                                      
  92   1                                    // M+S: ia in calcul in screc adresa dest
  93   1          
  94   1                                    // Daca nodul este master...
  95   1                                    // M: bufferul destinatie este deja plin, terminare receptie
  96   1      
  97   1                                    // M+S: determina lng
  98   1                                        
  99   1                                    // M+S: ia in calcul in screc lungimea datelor
 100   1          
 101   1                                    // Daca nodul este master...
 102   1                                    // M: stocheaza in bufbin adresa HW src 
 103   1                                    // M: stocheaza in bufbin tipul mesajului 
 104   1                                    // M: stocheaza in bufbin adresa nodului sursa al mesajului 
 105   1                                    // M: stocheaza in bufbin adresa nodului destinatie al mesajului  
 106   1                                    // M: stocheaza lng
 107   1            
 108   1                                          
 109   1                                    // M: determina un octet de date
 110   1                                            
 111   1                                    // M: ia in calcul in screc octetul de date
 112   1                                            
 113   1                                        
 114   1                                    // M: determina suma de control
C51 COMPILER V9.59.0.0   RXMESAJV1                                                         04/03/2023 09:49:11 PAGE 3   

 115   1                                        
 116   1                                    // M: pune sc in bufbin
 117   1                                          
 118   1                                    // M: mesaj corect, marcare buffer plin
 119   1                                            
 120   1                                        
 121   1                                    // M: eroare SC, terminare receptie
 122   1                                      
 123   1                                    // Daca nodul este slave ...
 124   1                                    // S: stocheaza la destsrc codul nodului sursa al mesajului 
 125   1                                    // S: stocheaza lng
 126   1                                        
 127   1                                    // S: determina un octet de date
 128   1                                          
 129   1                                    // S: ia in calcul in screc octetul de date
 130   1                                        
 131   1                                    
 132   1                                    // S: determina suma de control
 133   1                                          
 134   1                                          
 135   1                                    // S: mesaj corect, marcare buffer plin
 136   1                                      
 137   1                                        
 138   1                                    // S: eroare SC, terminare receptie
 139   1                                    
 140   1                                      
 141   1                                      
 142   1                                    // M+S: determina suma de control
 143   1                                      
 144   1                                    // M+S: eroare SC, terminare receptie
 145   1            return TMO;                         
 146   1      }                             
*** WARNING C280 IN LINE 18 OF RxMesajV1.c: 'i': unreferenced local variable
 147          
 148          
 149          //********************************************************************************************************
             -***
 150          unsigned char ascii2bin(unsigned char *ptr){      // converteste doua caractere ASCII HEX de la adresa ptr
 151   1        unsigned char bin;
 152   1        
 153   1        if(*ptr > '9') bin = (*ptr++ - 'A' + 10) << 4;  // contributia primului caracter daca este litera
 154   1        else bin = (*ptr++ - '0') << 4;                 // contributia primului caracter daca este cifra
 155   1        if(*ptr > '9') bin  += (*ptr++ - 'A' + 10);     // contributia celui de-al doilea caracter daca este litera
 156   1        else bin += (*ptr++ - '0');                     // contributia celui de-al doilea caracter daca este cifra
 157   1        return bin;
 158   1      }
 159          
 160          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    127    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
